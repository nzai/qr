<html>

<head>
    <title>Simulate Result</title>
    <meta charset="utf-8" />
</head>

<body>
    <div id="main" style="width: 100%;height:700px;"></div>
    <script src="echarts.min.js" type="text/javascript"></script>
    <script src="jquery-3.6.0.min.js" type="text/javascript"></script>
    <script type="text/javascript">
        var myChart = echarts.init(document.getElementById('main'));

        var upColor = '#ec0000';
        var upBorderColor = '#8A0000';
        var downColor = '#00da3c';
        var downBorderColor = '#008F28';

        $.get('/chart', function (rawData) {
            // 指定图表的配置项和数据
            var option = {
                animation: false,
                legend: {
                    // bottom: 10,
                    left: 'center',
                    data: ['Qutoe']
                },
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'cross'
                    },
                    borderWidth: 1,
                    borderColor: '#ccc',
                    padding: 10,
                    textStyle: {
                        color: '#000'
                    },
                    position: function (pos, params, el, elRect, size) {
                        const obj = {
                            top: 10
                        };
                        obj[['left', 'right'][+(pos[0] < size.viewSize[0] / 2)]] = 30;
                        return obj;
                    }
                    // extraCssText: 'width: 170px'
                },
                axisPointer: {
                    link: [
                        {
                            xAxisIndex: 'all'
                        }
                    ],
                    label: {
                        backgroundColor: '#777'
                    }
                },
                toolbox: {
                    feature: {
                        dataZoom: {
                            yAxisIndex: false
                        },
                        brush: {
                            type: ['lineX', 'clear']
                        }
                    }
                },
                brush: {
                    xAxisIndex: 'all',
                    brushLink: 'all',
                    outOfBrush: {
                        colorAlpha: 0.1
                    }
                },
                visualMap: {
                    show: false,
                    seriesIndex: 1,
                    dimension: 2,
                    pieces: [
                        {
                            value: 1,
                            color: downColor
                        },
                        {
                            value: -1,
                            color: upColor
                        }
                    ]
                },
                grid: [
                    {
                        left: '10%',
                        right: '8%',
                        height: '50%'
                    },
                    {
                        left: '10%',
                        right: '8%',
                        top: '63%',
                        height: '16%'
                    }
                ],
                xAxis: [
                    {
                        type: 'category',
                        data: rawData.category,
                        scale: true,
                        boundaryGap: false,
                        axisLine: { onZero: false },
                        splitLine: { show: false },
                        min: 'dataMin',
                        max: 'dataMax',
                        axisPointer: {
                            z: 100
                        }
                    },
                    {
                        type: 'category',
                        gridIndex: 1,
                        data: rawData.category,
                        scale: true,
                        boundaryGap: false,
                        axisLine: { onZero: false },
                        axisTick: { show: false },
                        splitLine: { show: false },
                        axisLabel: { show: false },
                        min: 'dataMin',
                        max: 'dataMax'
                    }
                ],
                yAxis: [
                    {
                        scale: true,
                        splitArea: {
                            show: true
                        }
                    },
                    {
                        scale: true,
                        gridIndex: 1,
                        splitNumber: 2,
                        axisLabel: { show: false },
                        axisLine: { show: false },
                        axisTick: { show: false },
                        splitLine: { show: false }
                    }
                ],
                dataZoom: [
                    {
                        type: 'inside',
                        xAxisIndex: [0, 1],
                        start: 98,
                        end: 100
                    },
                    {
                        show: true,
                        xAxisIndex: [0, 1],
                        type: 'slider',
                        top: '85%',
                        start: 98,
                        end: 100
                    }
                ],
                series: [
                    {
                        name: 'Quote',
                        type: 'candlestick',
                        data: rawData.quote,
                        itemStyle: {
                            color: upColor,
                            color0: downColor,
                            // borderColor: upBorderColor,
                            // borderColor0: downBorderColor
                        },
                        tooltip: {
                            formatter: function (param) {
                                param = param[0];
                                return [
                                    'Date: ' + 'rawData.category' + '<hr size=1 style="margin: 3px 0">',
                                    'Open: ' + param.data[0] + '<br/>',
                                    'Close: ' + param.data[1] + '<br/>',
                                    'Lowest: ' + param.data[2] + '<br/>',
                                    'Highest: ' + param.data[3] + '<br/>'
                                ].join('');
                            }
                        }
                    },
                    {
                        name: 'Volume',
                        type: 'bar',
                        xAxisIndex: 1,
                        yAxisIndex: 1,
                        data: rawData.volume
                    }
                ]
            };

            // indicators
            for (var index = 0; index < rawData.indicator_names.length; index++) {
                indicatorName = rawData.indicator_names[index];

                indicatorValues = [];
                for (var qi = 0; qi < rawData.result.snapshots.length; qi++) {
                    value = "-";
                    if (rawData.result.snapshots[qi].indicators.hasOwnProperty(indicatorName)) {
                        value = rawData.result.snapshots[qi].indicators[indicatorName]
                    }

                    indicatorValues.push(value);
                }


                option.series.push({
                    name: indicatorName,
                    type: 'line',
                    data: indicatorValues,
                    smooth: true,
                    lineStyle: {
                        opacity: 0.5
                    }
                });

                option.legend.data.push(indicatorName);
            }

            // mark point
            markData = [];
            for (var qi = 0; qi < rawData.result.snapshots.length; qi++) {
                if (rawData.result.snapshots[qi].operations.length == 0) {
                    continue
                }

                actions = [];
                for (var oi = 0; oi < rawData.result.snapshots[qi].operations.length; oi++) {
                    actions.push(rawData.result.snapshots[qi].operations[oi]);
                }

                markData.push({
                    name: 'Mark',
                    coord: [rawData.category[qi], rawData.quote[qi][1]],
                    // value: rawData.quote[qi][1],
                    value: actions.join('\n'),
                    itemStyle: {
                        color: 'rgb(41,60,85)'
                    }
                });
            }
            option.series[0].markPoint = {
                // label: {
                //     formatter: function (param) {
                //         return param.value;
                //     }
                // },
                data: markData,
                tooltip: {
                    formatter: function (param) {
                        return param.value;
                    }
                }
            };

            // 使用刚指定的配置项和数据显示图表。
            myChart.setOption(option);
        });

    </script>
</body>

</html>